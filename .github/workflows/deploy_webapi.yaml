# Name of the workflow (action) which will be displaye on GitHub
name: Deploy webapi to EB

# Specifies when should the workflow run. Currently it's set-up to every push
# to the branch called 'main'.
on:
  push:
    branches:
      # If you use 'master' branch instead, don't forget to change this to 'master'
      - master
    paths:
      # Only trigger the workflow if changes were made to files inside the 'src'
      # folder. This will make sure that application is not re-deployed if changes
      # are made to other files (e.g., README, docs/ or anything outside 'src')
      - src/**

# Global environment variables
env:
  APPLICATION_NAME: air4you
  ENVIRONMENT_NAME: Air4you-env-1
  AWS_REGION: eu-north-1

# Each workflow consists of one or many jobs
jobs:
  # A build job (this can be named called whatever you like)
  build:
    runs-on: ubuntu-latest


    services:
      postgres:
        image: postgres:12.2
        env:
          POSTGRES_USER: air4you
          POSTGRES_PASSWORD: password
          POSTGRES_DB: spring-jwt
        ports:
          # will assign a random free host port
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5


    # Each job consists of one or many steps
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      # Documentation for this action - https://github.com/actions/setup-java
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt" # one of the supported Java distributions

      - name: Build and package
        # The following command will execute mvn (Maven) validate, compile, test,
        # package and verify commands. A good explaination of the Maven's project
        # lifecycle from StackOverflow - https://stackoverflow.com/a/55645546/8475178
        run: mvn --batch-mode --update-snapshots verify

        # GitHub Actions don't persist files between jobs, so we will upload the
        # packaged jar file as an artifact, and then download it in the next job.
      - name: Upload the build artifact
        uses: actions/upload-artifact@v2
        with:
          name: jar-package
          path: target/*.jar
          # We can remove the build artifact from GitHub after one day. There is a
          # 1GB storage limit for artifacts, and we don't really need them after
          # the deployment.
          retention-days: 1

  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    # Only start executing after the build job has completed successfully
    needs: build

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

        # Download the packaged jar file
      - name: Download the build artifact
        uses: actions/download-artifact@v2
        id: download
        with:
          name: jar-package

        # Generate a deployment package with all files necessary for AWS Elastic Beanstalk
        # engine. This includes the packaged jar file and the .elasticbeanstalk folder
        # which contains config.yml file.
      - name: Generate deployment package
        run: zip -r deploy.zip *.jar .elasticbeanstalk

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v16
        with:
          # To make this work, you need to create an IAM User (ideally with least
          # privilege access) and store the generated Access key ID and Secret
          # access key to your GitHub repository Secrets.
          # > DO NOT HARDCODE THE VALUES DIRECTLY INTO THE CODE !!!
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # Make sure to set these variables based on your application/region
          application_name: ${{ env.APPLICATION_NAME }}
          environment_name: ${{ env.ENVIRONMENT_NAME }}
          version_label: v1-${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          # Deployment package we created in the previous step
          deployment_package: deploy.zip
